# Drop the 'new_index' column
df_apps_top_20_online <- subset(df_apps_top_20_online, select = -new_index)
# Rename columns
colnames(df_apps_top_20_online)[colnames(df_apps_top_20_online) == "column_name"] <- "package"
# Merge the data frames based on the 'package' column
df_top_apps_merged_online <- merge(df_apps_top_20_online, df_app_categories, by = "package", all.x = TRUE)
df_top_apps_online_usage <- df_top_apps_merged_online %>%
select(avg_usage_day, app_name)
# nonSchool ----
df_school_year_1002321_crit1_nonSchool <- df_school_year_1002321_crit1 %>%
filter(day_type == 'Weekend' | holiday == 'winter-break' | holiday == 'holiday')
# Unique days
total_unique_days_nonSchool <- df_school_year_1002321_crit1_nonSchool %>%
summarise(total_unique_days = n_distinct(date_local_original))
# Keep only imputed app-usage
df_app_usage_nonSchool <- df_school_year_1002321_crit1_nonSchool %>%
select(contains("_mins_impute"))
col_sums_nonSchool <- colSums(df_app_usage_nonSchool)
# Create a new data frame to store the column names and their sum values
df_apps_nonSchool <- data.frame(column_name = names(col_sums_nonSchool), sum_value = col_sums_nonSchool)
df_apps_nonSchool$avg_usage_day <- df_apps_nonSchool$sum_value / total_unique_days_nonSchool$total_unique_days
df_apps_nonSchool <- df_apps_nonSchool %>%
rownames_to_column(var = "new_index")
# Find top 20 apps
df_apps_top_20_nonSchool <- df_apps_nonSchool %>%
arrange(desc(avg_usage_day)) %>%
head(20)
# Drop the 'new_index' column
df_apps_top_20_nonSchool <- subset(df_apps_top_20_nonSchool, select = -new_index)
# Rename columns
colnames(df_apps_top_20_nonSchool)[colnames(df_apps_top_20_nonSchool) == "column_name"] <- "package"
# Merge the data frames based on the 'package' column
df_top_apps_merged_nonSchool <- merge(df_apps_top_20_nonSchool, df_app_categories, by = "package", all.x = TRUE)
df_top_apps_nonSchool_usage <- df_top_apps_merged_nonSchool %>%
select(avg_usage_day, app_name)
# Descriptives -------------------------------------------------------------------
# Non-school
df_non_school_stats_1002321 <- df_non_school_1002321 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "non_school") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Online
df_online_stats_1002321 <- df_online_1002321 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "online") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# f2f
df_f2f_stats_1002321 <- df_f2f_1002321 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "f2f") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Blended
df_blended_stats_1002321 <- df_blended_1002321 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "blended") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Combine summary stats
df_summary_stats_1002321 <- df_non_school_stats_1002321 %>%
rbind(df_online_stats_1002321) %>%
rbind(df_f2f_stats_1002321) %>%
rbind(df_blended_stats_1002321)
df_summary_stats_1002321$ID <- "1002321"
# Export 1002321
write.csv(df_summary_stats_1002321, "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/descriptives_1002321.csv", row.names = FALSE)
# Vis ----------------------------------------------------------------------------
# Import raw hourly data
df_hourly_1002321 <- read.csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/processed/df_school_year_1002321.csv")
# Add modality column to raw hourly data
df_hourly_1002321_modality <- df_hourly_1002321 %>%
mutate(
modality = case_when(
instruction_condition == "online" & day_type == "Weekday" & holiday == 'None' ~ "online",
instruction_condition == "face-to-face" & day_type == "Weekday" & holiday == 'None' ~ "f2f",
day_type == "Weekend" | holiday == 'winter-break' | holiday == 'holiday' ~ "non_school",
TRUE ~ "other"
)
) %>%
mutate(
use_duration_minutes_impute = ifelse(crit1 == "missing", NaN, use_duration_minutes_impute),
session_count_impute = ifelse(crit1 == "missing", NaN, session_count_impute),
app_switches_impute = ifelse(crit1 == "missing", NaN, app_switches_impute),
use_duration_minutes_impute = ifelse(modality == "other", NaN, use_duration_minutes_impute),
session_count_impute = ifelse(modality == "other", NaN, session_count_impute),
app_switches_impute = ifelse(modality == "other", NaN, app_switches_impute),
)
df_vis_1002321 <- df_hourly_1002321_modality %>%
select(days_since_start, use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original, modality) %>%
group_by(date_local_original) %>%
summarise(use_duration_daily = mean(use_duration_minutes_impute, na.rm = TRUE),
avg_session_length = sum(use_duration_minutes_impute) / sum(session_count_impute),
avg_switches_velocity = sum(use_duration_minutes_impute) / sum(app_switches_impute),
modality = paste(modality))
df_vis_1002321_daily <- df_vis_1002321 %>%
distinct()
# Convert the date_local_original column to Date format
df_vis_1002321_daily$date_local_original <- as.Date(df_vis_1002321_daily$date_local_original, format = "%Y-%m-%d")
# Create the ggplot
gg_usage_1002321 <- ggplot(df_vis_1002321_daily, aes(x = date_local_original, y = use_duration_daily)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Smartphone Usage (Mins)", title = "Case-Study 2: Daily Usage (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_discrete(name = "Modality", breaks = c("f2f", "non_school", "online"), labels = c("Face-To-Face", "Non-School Day", 'Online'))
print(gg_usage_1002321)
# Session vis
gg_sessions_1002321 <- ggplot(df_vis_1002321_daily, aes(x = date_local_original, y = avg_session_length)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Average Session Length (Mins)", title = "Case-Study 2: Average Length of Session (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_discrete(name = "Modality", breaks = c("f2f", "non_school", "online"), labels = c("Face-To-Face", "Non-School Day", 'Online'))
# Switches vis
gg_switches_1002321 <- ggplot(df_vis_1002321_daily, aes(x = date_local_original, y = avg_switches_velocity)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Average Time Between App-Switches (Mins)", title = "Case-Study 2: Average Time Between App-Switches (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_discrete(name = "Modality", breaks = c("f2f", "non_school", "online"), labels = c("Face-To-Face", "Non-School Day", 'Online'))
print(gg_switches_1002321)
# Save the plot as a PNG file
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/1002321/usage_1002321.png",
plot = gg_usage_1002321,
width = 10, height = 3.5, dpi = 1000)
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/1002321/sessions_1002321.png",
plot = gg_sessions_1002321,
width = 10, height = 3.5, dpi = 1000)
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/1002321/switches_1002321.png",
plot = gg_switches_1002321,
width = 10, height = 3.5, dpi = 1000)
# README ------------------------------------------------------------------------------------------------------
# This program is to investigate patterns of smartphone use in 3 participants
# We look at their metrics [usage, sessions, switches] across their respective conditions [online, f2f, blended, non-school]
# IMPORT LIBRARIES --------------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
# IMPORT DATA -------------------------------------------------------------------------------------------------
# Import 4 conditions
df_non_school <- read_csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/condition/df_non_school_participants.csv")
df_online <- read_csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/condition/df_online_participants.csv")
df_f2f <- read_csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/condition/df_f2f_participants.csv")
df_blended <- read_csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/condition/df_blended_participants.csv")
# Import app categories and packages
df_app_categories <- read_csv("/Users/baselhussein/Projects/ttf/data/app-categories/df_categories_tagged.csv")
df_app_categories$package <- paste(df_app_categories$package, "_mins_impute", sep = "")
# 216915 ------------------------------------------------------------------------------------------------------
# Subset data
df_non_school_216915 <- subset(df_non_school, ID == 216915)
df_online_216915 <- subset(df_online, ID == 216915)
df_f2f_216915 <- subset(df_f2f, ID == 216915)
df_blended_216915 <- subset(df_blended, ID == 216915)
# Top Apps ----------------------------------------------------------------------------------------------------
# f2f ----
# Select hourly f2f data
df_school_year_216915 <- read.csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/processed/df_school_year_216915.csv")
df_school_year_216915_crit1 <- df_school_year_216915 %>%
filter(crit1 == 'crit1')
df_school_year_216915_crit1_f2f <- df_school_year_216915_crit1 %>%
filter(instruction_condition == 'face-to-face' & day_type == 'Weekday' & holiday == 'None') # is.nan(holiday) not working...?
# Unique days
total_unique_days_f2f <- df_school_year_216915_crit1_f2f %>%
summarise(total_unique_days = n_distinct(date_local_original))
# Keep only imputed app-usage
df_app_usage_f2f <- df_school_year_216915_crit1_f2f %>%
select(contains("_mins_impute"))
col_sums_f2f <- colSums(df_app_usage_f2f)
# Create a new data frame to store the column names and their sum values
df_apps_f2f <- data.frame(column_name = names(col_sums_f2f), sum_value = col_sums_f2f)
df_apps_f2f$avg_usage_day <- df_apps_f2f$sum_value / total_unique_days_f2f$total_unique_days
df_apps_f2f <- df_apps_f2f %>%
rownames_to_column(var = "new_index")
# Find top 20 apps
df_apps_top_20_f2f <- df_apps_f2f %>%
arrange(desc(avg_usage_day)) %>%
head(20)
# Drop the 'new_index' column
df_apps_top_20_f2f <- subset(df_apps_top_20_f2f, select = -new_index)
# Rename columns
colnames(df_apps_top_20_f2f)[colnames(df_apps_top_20_f2f) == "column_name"] <- "package"
# Merge the data frames based on the 'package' column
df_top_apps_merged_f2f <- merge(df_apps_top_20_f2f, df_app_categories, by = "package", all.x = TRUE)
df_top_apps_f2f_usage <- df_top_apps_merged_f2f %>%
select(avg_usage_day, app_name)
# Online ----
df_school_year_216915_crit1_online <- df_school_year_216915_crit1 %>%
filter(instruction_condition == 'online' & day_type == 'Weekday' & holiday == 'None')
# Unique days
total_unique_days_online <- df_school_year_216915_crit1_online %>%
summarise(total_unique_days = n_distinct(date_local_original))
# Keep only imputed app-usage
df_app_usage_online <- df_school_year_216915_crit1_online %>%
select(contains("_mins_impute"))
col_sums_online <- colSums(df_app_usage_online)
# Create a new data frame to store the column names and their sum values
df_apps_online <- data.frame(column_name = names(col_sums_online), sum_value = col_sums_online)
df_apps_online$avg_usage_day <- df_apps_online$sum_value / total_unique_days_online$total_unique_days
df_apps_online <- df_apps_online %>%
rownames_to_column(var = "new_index")
# Find top 20 apps
df_apps_top_20_online <- df_apps_online %>%
arrange(desc(avg_usage_day)) %>%
head(20)
# Drop the 'new_index' column
df_apps_top_20_online <- subset(df_apps_top_20_online, select = -new_index)
# Rename columns
colnames(df_apps_top_20_online)[colnames(df_apps_top_20_online) == "column_name"] <- "package"
# Merge the data frames based on the 'package' column
df_top_apps_merged_online <- merge(df_apps_top_20_online, df_app_categories, by = "package", all.x = TRUE)
df_top_apps_online_usage <- df_top_apps_merged_online %>%
select(avg_usage_day, app_name)
# nonSchool ----
df_school_year_216915_crit1_nonSchool <- df_school_year_216915_crit1 %>%
filter(day_type == 'Weekend' | holiday == 'winter-break' | holiday == 'holiday')
# Unique days
total_unique_days_nonSchool <- df_school_year_216915_crit1_nonSchool %>%
summarise(total_unique_days = n_distinct(date_local_original))
# Keep only imputed app-usage
df_app_usage_nonSchool <- df_school_year_216915_crit1_nonSchool %>%
select(contains("_mins_impute"))
col_sums_nonSchool <- colSums(df_app_usage_nonSchool)
# Create a new data frame to store the column names and their sum values
df_apps_nonSchool <- data.frame(column_name = names(col_sums_nonSchool), sum_value = col_sums_nonSchool)
df_apps_nonSchool$avg_usage_day <- df_apps_nonSchool$sum_value / total_unique_days_nonSchool$total_unique_days
df_apps_nonSchool <- df_apps_nonSchool %>%
rownames_to_column(var = "new_index")
# Find top 20 apps
df_apps_top_20_nonSchool <- df_apps_nonSchool %>%
arrange(desc(avg_usage_day)) %>%
head(20)
# Drop the 'new_index' column
df_apps_top_20_nonSchool <- subset(df_apps_top_20_nonSchool, select = -new_index)
# Rename columns
colnames(df_apps_top_20_nonSchool)[colnames(df_apps_top_20_nonSchool) == "column_name"] <- "package"
# Merge the data frames based on the 'package' column
df_top_apps_merged_nonSchool <- merge(df_apps_top_20_nonSchool, df_app_categories, by = "package", all.x = TRUE)
df_top_apps_nonSchool_usage <- df_top_apps_merged_nonSchool %>%
select(avg_usage_day, app_name)
# Descriptives -------------------------------------------------------------------
# Non-school
df_non_school_stats_216915 <- df_non_school_216915 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "non_school") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Online
df_online_stats_216915 <- df_online_216915 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "online") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# f2f
df_f2f_stats_216915 <- df_f2f_216915 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "f2f") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Blended
df_blended_stats_216915 <- df_blended_216915 %>%
select(use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original) %>%
group_by(date_local_original) %>%
summarize(use_duration_daily = sum(use_duration_minutes_impute),
#sessions_daily = sum(session_count_impute),
#switches_daily = sum(app_switches_impute),
session_length_daily = sum(use_duration_minutes_impute) / sum(session_count_impute),
switches_velocity_daily = sum(use_duration_minutes_impute) / sum(app_switches_impute),
condition = "blended") %>%
group_by(condition) %>%
summarize(use_duration_avg_daily = mean(use_duration_daily, na.rm = TRUE),
# sessions_avg_daily = mean(sessions_daily, na.rm = TRUE),
# switches_avg_daily = mean(switches_daily, na.rm = TRUE),
avg_session_length = mean(session_length_daily, na.rm = TRUE),
avg_switch_velocity = mean(switches_velocity_daily, na.rm = TRUE),
total_observations = length(date_local_original))
# Combine summary stats
df_summary_stats_216915 <- df_non_school_stats_216915 %>%
rbind(df_online_stats_216915) %>%
rbind(df_f2f_stats_216915) %>%
rbind(df_blended_stats_216915)
df_summary_stats_216915$ID <- "216915"
# Export 216915
write.csv(df_summary_stats_216915, "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/descriptives_216915.csv", row.names = FALSE)
# Vis ----------------------------------------------------------------------------
# Import raw hourly data
df_hourly_216915 <- read.csv("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/processed/df_school_year_216915.csv")
# Add modality column to raw hourly data
df_hourly_216915_modality <- df_hourly_216915 %>%
mutate(
modality = case_when(
instruction_condition == "online" & day_type == "Weekday" & holiday == 'None' ~ "online",
instruction_condition == "face-to-face" & day_type == "Weekday" & holiday == 'None' ~ "f2f",
day_type == "Weekend" | holiday == 'winter-break' | holiday == 'holiday' ~ "non_school",
TRUE ~ "other"
)
) %>%
mutate(
use_duration_minutes_impute = ifelse(crit1 == "missing", NaN, use_duration_minutes_impute),
session_count_impute = ifelse(crit1 == "missing", NaN, session_count_impute),
app_switches_impute = ifelse(crit1 == "missing", NaN, app_switches_impute),
use_duration_minutes_impute = ifelse(modality == "other", NaN, use_duration_minutes_impute),
session_count_impute = ifelse(modality == "other", NaN, session_count_impute),
app_switches_impute = ifelse(modality == "other", NaN, app_switches_impute),
)
df_vis_216915 <- df_hourly_216915_modality %>%
select(days_since_start, use_duration_minutes_impute, session_count_impute, app_switches_impute, date_local_original, modality) %>%
group_by(date_local_original) %>%
summarise(use_duration_daily = mean(use_duration_minutes_impute, na.rm = TRUE),
avg_session_length = sum(use_duration_minutes_impute) / sum(session_count_impute),
avg_switches_velocity = sum(use_duration_minutes_impute) / sum(app_switches_impute),
modality = paste(modality))
df_vis_216915_daily <- df_vis_216915 %>%
distinct()
# Convert the date_local_original column to Date format
df_vis_216915_daily$date_local_original <- as.Date(df_vis_216915_daily$date_local_original, format = "%Y-%m-%d")
# Create the ggplot
gg_usage_216915 <- ggplot(df_vis_216915_daily, aes(x = date_local_original, y = use_duration_daily)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Smartphone Usage (Mins)", title = "Case-Study 3: Daily Usage (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_manual(name = "Modality",
breaks = c("f2f", "non_school", "online"),
labels = c("Face-To-Face", "Non-School Day", 'Online'),
values = c("f2f" = "red", "non_school" = "green", "online" = "blue"))
print(gg_usage_216915)
# Session vis
gg_sessions_216915 <- ggplot(df_vis_216915_daily, aes(x = date_local_original, y = avg_session_length)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Average Session Length (Mins)", title = "Case-Study 3: Average Length of Session (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_manual(name = "Modality",
breaks = c("f2f", "non_school", "online"),
labels = c("Face-To-Face", "Non-School Day", 'Online'),
values = c("f2f" = "red", "non_school" = "green", "online" = "blue"))
# Switches vis
gg_switches_216915 <- ggplot(df_vis_216915_daily, aes(x = date_local_original, y = avg_switches_velocity)) +
geom_point(aes(color = modality)) +
geom_line(color = "#BBBBBB") +
labs(x = "", y = "Average Time Between App-Switches (Mins)", title = "Case-Study 3: Average Time Between App-Switches (9AM-3PM)") +
theme_minimal() +
scale_x_date(date_breaks = "30 days", date_labels = "%Y-%m-%d") +
scale_color_manual(name = "Modality",
breaks = c("f2f", "non_school", "online"),
labels = c("Face-To-Face", "Non-School Day", 'Online'),
values = c("f2f" = "red", "non_school" = "green", "online" = "blue"))
print(gg_switches_216915)
# Save the plot as a PNG file
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/216915/usage_216915.png",
plot = gg_usage_216915,
width = 10, height = 3.5, dpi = 1000)
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/216915/sessions_216915.png",
plot = gg_sessions_216915,
width = 10, height = 3.5, dpi = 1000)
ggsave(filename = "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/case-studies/plots/216915/switches_216915.png",
plot = gg_switches_216915,
width = 10, height = 3.5, dpi = 1000)
# README -------------------------------------------------------------------------------------------------------
# Program reads in participant files and outputs top10 apps used by each participant
# Counts how often an app appears in top10
# IMPORT LIBRARIES -------------------------------------------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(dplyr)
library(tibble)
# IMPORT IDS -------------------------------------------------------------------------------------------------------
id_student <- c(200215, 1002321, 1002621, 1002911,1004381,201142,1006542,201912,1006841,202055,202815,
203055,203225,1010935,1011411 ,204185, 1011551,1012315,205165,1015951,1010221,206736,206737,
206866,207675,1018335,1018975,202152,209385,209715,209675,1025501,210675,210775,211025,211275,1027365,
211125,1028595,1028596,212325,212326,211515,212955,212681,213425,1031351,1035691,213545,213181,
213975,214135,1032065,1037635,214765,216915,216245,216525,217845,218866,1038575,223135,
228185,228186,228755,228825,229425,229535,229745,230035,230235,
231555,231656,232455,232456,232575,249625,249785,249786,249985,250555,250625,250845,251166,251655,251735,251835,
253715,253716,255455,255576,256025,256026,256335,256425,256426,257235,258145,258645,
258965,259035,260085,260115,260865,261115,261225,1041555,1041635,1043405,1043505,
1045385,222115,221275,220575,1047965,1048015,1048635,1048745,1049815,1050095,1051515,1051725,1051285,
1051855,1052055,1052285,1052975,1054736,1053845,1054745,1058685,1059355,1060115,236525,1060675,
1062035,1063315,1064755,1064835,1065015,1065205,1065705,1065706,1066235)
# INIT SUMMARY TABLE -------------------------------------------------------------------------------------------------------
# Init summary_table
columns = c("app", "usage_day")
df_school_hours_app_summary = data.frame(matrix(nrow = 0, ncol = length(columns)))  # init empty dataframe
colnames(df_school_hours_app_summary) = columns
### IMPORT DATA
df_categories <- read_csv("/Users/baselhussein/Projects/ttf/data/app-categories/df_categories_tagged.csv")
# PREPROCESS STUDENT DATA -------------------------------------------------------------------------------------------------------
for (i in 1:length(id_student)){
ID = id_student[i]
#ID = 200215
# Import data
df <- read_csv(paste0("/Users/baselhussein/Projects/ttf/school-hours-analysis/data/processed/df_school_year_", ID, ".csv"))
# Unique days
total_unique_days <- df %>%
summarise(total_unique_days = n_distinct(date_local_original))
# Keep only imputed app-usage
df_app_usage <- df %>%
select(contains("_mins_impute"))
col_sums <- colSums(df_app_usage)
# Create a new data frame to store the column names and their sum values
df_apps <- data.frame(column_name = names(col_sums), sum_value = col_sums)
df_apps$sum_value <- df_apps$sum_value / total_unique_days$total_unique_days
df_apps <- df_apps %>%
rownames_to_column(var = "new_index")
df_apps_top_10 <- df_apps %>%
arrange(desc(sum_value)) %>%
head(10)
# Drop the 'new_index' column
df_apps_top_10 <- subset(df_apps_top_10, select = -new_index)
# Rename columns
colnames(df_apps_top_10)[colnames(df_apps_top_10) == "sum_value"] <- "usage_day"
colnames(df_apps_top_10)[colnames(df_apps_top_10) == "column_name"] <- "app"
# Add to df_school_hours_summary
df_school_hours_app_summary <- df_school_hours_app_summary %>%
rbind(df_apps_top_10)
}
# EXPORT LIST -----------------------------------------------------------------------------------------------------------
# Merge package names to df_app_summary
colnames(df_school_hours_app_summary)[colnames(df_school_hours_app_summary) == "app"] <- "package"
df_school_hours_app_summary$package <- as.character(df_school_hours_app_summary$package)
df_categories$package <- as.character(df_categories$package)
df_categories$package <- paste(df_categories$package, "_mins_impute", sep = "")
# Merge the data frames based on the 'package' column
merged_df <- merge(df_school_hours_app_summary, df_categories, by = "package", all.x = TRUE)
# Count how many times specific apps appear in data
df_top_10_counts <- merged_df %>%
group_by(app_name) %>%
summarize(count = n())
write.csv(df_top_10_counts, "/Users/baselhussein/Projects/ttf/school-hours-analysis/data/school-hours_top10-apps.csv", row.names = FALSE)
